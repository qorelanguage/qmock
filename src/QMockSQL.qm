# -*- mode: qore; indent-tabs-mode: nil -*-
/*  QMockSQL.qm Copyright 2018 - 2018 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.8.13

%new-style
%require-types
%enable-all-warnings
%strict-args

module QMockSQL {
    version = "1.0";
    desc = "QMockSQL is a module that extends QMock module with mocks from Qore::SQL namespace.";
    author = "Qore Technologies";
    url = "https://github.com/qorelanguage/qmock";
    license = "MIT,LGPL";

    init = sub () {
    };

    del = sub () {
    };
}

%requires sql
%requires(reexport) QMock

public namespace QMock {
public namespace SQL {

    #! TODO doc
    public class DatasourceMock inherits QMock, Qore::SQL::AbstractDatasource {
        *string getPassword() { return QMock::methodGate("getPassword"); }
        *string getOSEncoding() { return QMock::methodGate("getOSEncoding"); }
        *string getDBName() { return QMock::methodGate("getDBName"); }
        any selectRows(string sql) { return QMock::methodGate("selectRows", sql); }
        bool inTransaction() {  return QMock::methodGate("inTransaction"); }
        any getClientVersion() { return QMock::methodGate("getClientVersion"); }
        any exec(string sql) { return QMock::methodGate("exec", sql); }
        *int getPort() { return QMock::methodGate("getPort"); }
        any execRaw(string sql) { return QMock::methodGate("execRaw", sql); }
        any getServerVersion() { return QMock::methodGate("getServerVersion"); }
        *string getHostName() { return QMock::methodGate("getHostName"); }
        string getDriverName() { return QMock::methodGate("getDriverName"); }
        any select(string sql) { return QMock::methodGate("select", sql); }
        string getDBEncoding() { return QMock::methodGate("getDBEncoding"); }
        any vselect(string sql, *softlist vargs) { return QMock::methodGate("vselect", sql, vargs); }
        string getConfigString() { return QMock::methodGate("getConfigString"); }
        any vselectRows(string sql, *softlist vargs) { return QMock::methodGate("vselectRows", sql, vargs); }
        nothing beginTransaction() { QMock::methodGate("beginTransaction"); }
        nothing rollback() { QMock::methodGate("rollback"); }
        any selectRow(string sql) { return QMock::methodGate("selectRow", sql); }
        hash getConfigHash() { return QMock::methodGate("getConfigHash"); }
        nothing commit() { QMock::methodGate("commit"); }
        any vselectRow(string sql, *softlist vargs) { return QMock::methodGate("vselectRow", sql, vargs); }
        any vexec(string sql, *softlist vargs) { return QMock::methodGate("vexec", sql, vargs); }
        *string getUserName() { return QMock::methodGate("getUserName"); }
        SQLStatement getSQLStatement() { return QMock::methodGate("getSQLStatement"); }
    }

} # namespace
} # namespace
