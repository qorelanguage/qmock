# -*- mode: qore; indent-tabs-mode: nil -*-
/*  QMockQoreSQL.qm Copyright 2018 - 2018 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.8.13

%new-style
%require-types
%enable-all-warnings
%strict-args

module QMockQoreSQL {
    version = "1.0";
    desc = "QMockQoreSQL is a module that extends QMock module with mocks from Qore::SQL namespace.";
    author = "Qore Technologies";
    url = "https://github.com/qorelanguage/qmock";
    license = "MIT,LGPL";

    init = sub () {
    };

    del = sub () {
    };
}

%requires(reexport) QMock

public namespace QMock {
public namespace SQL {

    #! Datasource mock that implements AbstractDatasource interface
    public class DatasourceMock inherits QMock, Qore::SQL::AbstractDatasource {

        private auto call_mock(*list argv) {
            string func_name = replace(get_thread_call_stack()[2].function, "DatasourceMock::", "");
            return call_function_args(\QMock::methodGate(), (func_name,) + argv);
        }

        *string getPassword()                        { return call_mock(argv); }
        *string getOSEncoding()                      { return call_mock(argv); }
        *string getDBName()                          { return call_mock(argv); }
        any selectRows(string sql)                   { return call_mock((sql, ) + argv); }
        bool inTransaction()                         { return call_mock(argv); }
        any getClientVersion()                       { return call_mock(argv); }
        any exec(string sql)                         { return call_mock((sql, ) + argv); }
        *int getPort()                               { return call_mock(argv); }
        any execRaw(string sql)                      { return call_mock((sql, ) + argv); }
        any getServerVersion()                       { return call_mock(argv); }
        *string getHostName()                        { return call_mock(argv); }
        string getDriverName()                       { return call_mock(argv); }
        any select(string sql)                       { return call_mock((sql, ) + argv); }
        string getDBEncoding()                       { return call_mock(argv); }
        any vselect(string sql, *softlist vargs)     { return call_mock((sql, vargs) + argv); }
        string getConfigString()                     { return call_mock(argv); }
        any vselectRows(string sql, *softlist vargs) { return call_mock((sql, vargs) + argv); }
        nothing beginTransaction()                   { call_mock(argv); }
        nothing rollback()                           { call_mock(argv); }
        any selectRow(string sql)                    { return call_mock((sql, ) + argv); }
        hash getConfigHash()                         { return call_mock(argv); }
        nothing commit()                             { call_mock(argv); }
        any vselectRow(string sql, *softlist vargs)  { return call_mock((sql, vargs) + argv); }
        any vexec(string sql, *softlist vargs)       { return call_mock((sql, vargs) + argv); }
        *string getUserName()                        { return call_mock(argv); }
        SQLStatement getSQLStatement()               { return call_mock(argv); }
    }

} # namespace
} # namespace

# Classes defined in Qore::SQL namespace must be defined in root namespace so these are find before the original ones.

#! SQLStatement mock
public class SQLStatement inherits QMock {
    public auto methodGate() {
        return call_function_args(\QMock::methodGate(), argv);
    }
}
