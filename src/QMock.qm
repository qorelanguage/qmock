# -*- mode: qore; indent-tabs-mode: nil -*-
/*  QMock.qm Copyright 2018 - 2018 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.8.13

%new-style
%require-types
%enable-all-warnings
%strict-args

module QMock {
    version = "1.0";
    desc = "QMock is a module for testing in Qore. It allows you to mock methods of objects and make assertions about how they have been called.";
    author = "Qore Technologies";
    url = "https://github.com/qorelanguage/qmock";
    license = "MIT,LGPL";

    init = sub () {
    };

    del = sub () {
    };
}

public namespace QMock {

    #! Proxy used when mocking methods not via code directly, but with gradually settings.
    public class QMockProxy {
    # private members
        private {
            list<code> rules;           # list of rules for evaluating (rule code must return boolean)
            auto return_value;          # the value to return
            *code exec_code;            # the code to execute
            *QMockProxy next;           # chain of other QMockProxies to evaluate
        }

    #public methods
        #! Creates the instance of QMockProxy with default settings.
        /** Default behavior of QMockProxy is to always return NOTHING.
          */
        public constructor() {
            self.rules = new list<code>();
            self.return_value = NOTHING;
            self.exec_code = NOTHING;
            self.next = NOTHING;
        }

        #! Adds new QMockProxy to the chain for future evaluation.
        /** @param obj    new QMockProxy that will be added into the chain
          */
        public nothing addEvaluation(QMockProxy obj) {
            if (next !== NOTHING) {
                throw "INVALID-ARGUMENT", "Next proxy in evaluation chain is already set";
            }
            next = obj;
        }

        #! Evaluates the QMockProxy.
        /** @param argv    List of arguments (or NOTHING) originally passed as arguments
          * @returns auto   Returns any value that was previously set via QMockProxy::returnValue
          * @throws "QMOCK-PROXY-EVAL-FAIL"   If none of the rules nor QMockProxies from chain comply.
          * @throws any     Throws any other exception that was previously set either via QMockProxy::execCode
          *                 or via QMockProxy::throwException
          */
        public auto eval(*list argv) {
            # try if all rules comply (no rules = always comply)
            bool match = True;
            foreach code rule in (self.rules) {
                if (!rule(argv)) {
                    match = False;
                    break;
                }
            }

            # if comply then return
            if (match) {
                if (exists self.exec_code) {
                    # call the exec_code with args and return its value
                    return call_function_args(self.exec_code, argv);
                }
                return self.return_value;
            }

            # if rules didn't comply, try to evaluate next QMockProxy from the chain
            if (self.next) {
                return self.next.eval(argv);
            }

            # if none of the QMockProxies from the chain comply, throw exception
            throw "QMOCK-PROXY-EVAL-FAIL", NOTHING, argv;
        }

        # -------------- rules ------

        #! Adds new rule; Amount of arguments must equal the expected value.
        /** @param expected_count    amount of expected arguments
          * @returns QMockProxy     self, to allow chaining calls
          */
        public QMockProxy argsCountEq(int expected_count) {
            push self.rules, bool sub(*list argv) {
                return expected_count === argv.size();
            };
            return self;
        }

        #! Adds new rule; All arguments must equal (===) the expected ones.
        /** @param expected_argv    list (or NOTHING) of expected arguments
          * @returns QMockProxy     self, to allow chaining calls
          */
        public QMockProxy argsEq(*list expected_argv) {
            push self.rules, bool sub(*list argv) {
                return expected_argv === argv;
            };
            return self;
        }

        #! Adds new rule; All arguments must soft equal (==) the expected ones.
        /** @param expected_argv    list (or NOTHING) of expected arguments
          * @returns QMockProxy     self, to allow chaining calls
          */
        public QMockProxy argsEqSoft(*list expected_argv) {
            push self.rules, bool sub(*list argv) {
                return expected_argv == argv;
            };
            return self;
        }

        #! Adds new rule; Specific argument on position @p arg_no must equal (===) the expected value.
        /** @param arg_no    index of the parameter to be tested (indexed from 0)
          * @param expected  any expected value of the parameter
          * @returns QMockProxy     self, to allow chaining calls
          * @throws "INVALID-ARGUMENT" when argument number is < 0
          */
        public QMockProxy argEq(int arg_no, auto expected) {
            if (arg_no < 0) {
                throw "INVALID-ARGUMENT", sprintf("Argument number must be >= 0 but received %y", arg_no);
            }
            push self.rules, bool sub(*list argv) {
                if (arg_no >= argv.size()) {
                    return False;
                }
                return argv[arg_no] === expected;
            };
            return self;
        }

        #! Adds new rule; Specific argument on position @p arg_no must soft equal (==) the expected value.
        /** @param arg_no    index of the parameter to be tested (indexed from 0)
          * @param expected  any expected value of the parameter
          * @returns QMockProxy     self, to allow chaining calls
          * @throws "INVALID-ARGUMENT" when argument number is < 0
          */
        public QMockProxy argEqSoft(int arg_no, auto expected) {
            if (arg_no < 0) {
                throw "INVALID-ARGUMENT", sprintf("Argument number must be >= 0 but received %y", arg_no);
            }
            push self.rules, bool sub(*list argv) {
                if (arg_no >= argv.size()) {
                    return False;
                }
                return argv[arg_no] == expected;
            };
            return self;
        }

        #! Adds new rule; Specific argument on position @p arg_no must match the regular expression.
        /** @param arg_no    index of the parameter to be tested (indexed from 0)
          * @param pattern   regular expression pattern
          * @param options   regular expression options
          * @returns QMockProxy     self, to allow chaining calls
          * @throws "INVALID-ARGUMENT" when argument number is < 0
          *
          * Note: argument on position @p arg_no must be the type of string.
          */
        public QMockProxy argRegex(int arg_no, string pattern, int options = 0) {
            if (arg_no < 0) {
                throw "INVALID-ARGUMENT", sprintf("Argument number must be >= 0 but received %y", arg_no);
            }
            push self.rules, bool sub(*list argv) {
                if (arg_no >= argv.size()) {
                    return False;
                }
                auto arg = argv[arg_no];
                if (arg instanceof string) {
                    return arg.regex(pattern, options);
                }
                return False;
            };
            return self;
        }

        #! Adds new rule; Specific argument on position @p arg_no must match the regular expression.
        /** @param arg_no    index of the parameter to be tested (indexed from 0)
          * @param pattern   regular expression pattern
          * @param options   regular expression options
          * @returns QMockProxy     self, to allow chaining calls
          * @throws "INVALID-ARGUMENT" when argument number is < 0
          *
          * Note: argument on position @p arg_no will be converted to the type of string (via softstring).
          */
        public QMockProxy argRegexSoft(int arg_no, string pattern, int options = 0) {
            if (arg_no < 0) {
                throw "INVALID-ARGUMENT", sprintf("Argument number must be >= 0 but received %y", arg_no);
            }
            push self.rules, bool sub(*list argv) {
                if (arg_no >= argv.size()) {
                    return False;
                }
                softstring arg = argv[arg_no];
                return arg.regex(pattern, options);
            };
            return self;
        }

        # -----------------------

        #! Stores the provided @p return_value and returns it when QMockProxy::eval is called.
        /** @param return_value     the value that will be returned when evaluating
          * @returns NOTHING this is effectively the last call of the chain
          * @throws "INVALID-ARGUMENT" when the return value was previously set
          * @throws "INVALID-ARGUMENT" when the exec code was previously set
          *
          * Note: Either returnValue or execCode must be set, never both.
          */
        public nothing returnValue(auto return_value) {
            if (self.return_value !== NOTHING) {
                throw "INVALID-ARGUMENT", sprintf("Return value was already set to %y", self.return_value);
            }
            if (self.exec_code !== NOTHING) {
                throw "INVALID-ARGUMENT", "Exec code was already set";
            }
            self.return_value = return_value;
        }

        #! Stores the provided @p exec_code and executes it when QMockProxy::eval is called.
        /** All arguments from QMockProxy::eval will be passed into the @p exec_code. Returned value from
          * @p exec_code will be returned to the caller then.
          * @param exec_code     the code that will be executed when evaluating
          * @returns NOTHING this is effectively the last call of the chain
          * @throws "INVALID-ARGUMENT" when the exec code was previously set
          * @throws "INVALID-ARGUMENT" when the return value was previously set
          *
          * Note: Either returnValue or execCode must be set, never both.
          */
        public nothing execCode(code exec_code) {
            if (self.return_value !== NOTHING) {
                throw "INVALID-ARGUMENT", sprintf("Return value was already set to %y", self.return_value);
            }
            if (self.exec_code !== NOTHING) {
                throw "INVALID-ARGUMENT", "Exec code was already set";
            }
            self.exec_code = exec_code;
        }

        #! Throws exception with the provided date when QMockProxy::eval is called.
        /** @param err     the error message of the thrown exception
          * @param desc    the description of the thrown exception
          * @param arg     the arguments of the thrown exception
          * @returns NOTHING this is effectively the last call of the chain
          * @throws "INVALID-ARGUMENT" see QMockProxy::execCode
          *
          * Note: Either returnValue or execCode or throwException must be set, never more.
          */
        public nothing throwException(auto err, auto desc = NOTHING, auto arg = NOTHING) {
            self.execCode(sub() {
                argv = NOTHING; # suppress error when PO_REQUIRE_TYPES or PO_STRICT_ARGS is set
                throw err, desc, arg;
            });
        }
    }

    # ----------------------------- QMock --------------------------

    #! QMock settings specifications
    public hashdecl QMockSettings {
        bool is_strict = STRICT;        # whether the mock shall be strict (throw exception when not mocked)
    }

    #! Provides the API to mock methods.
    public class QMock {

    # public constants
        public {
            const STRICT = True;
            const VAGUE = False;
        }

    # public members
        public {
            list _mock_calls;           # list of calls
            hash _mock_calls_with_args; # list of calls with its arguments
        }

    # private members
        private {
            hash<string, auto> mocked_methods; # hash indexed by method name with value of either 'code' or 'QMockProxy'
            hash<QMockSettings> settings;      # settings of the QMock object
        }

    #public methods
        #! Creates instance of QMock.
        /** Note: Use only default ctor for QMock, so no dependencies are inherited.
          */
        public constructor() {
            self.mocked_methods = new hash<string, auto>();
            self.settings = new hash<QMockSettings>();
            self._mock_calls = list();
            self._mock_calls_with_args = hash();
        }

        #! Updates settings of the instance. @see QMockSettings.
        /** @param settings      New settings that should be used.
          */
        public nothing _mockSettings(hash settings) {
            self._mockSettings(cast<hash<QMockSettings>>(settings));
        }

        #! Updates settings of the instance. @see QMockSettings.
        /** @param settings      New settings that should be used.
          */
        public nothing _mockSettings(hash<QMockSettings> settings) {
            self.settings = settings;
        }

        #! Mocks @p method_names method(s) with passed @method_code code.
        /** @param method_names      One or more method names that should be mocked
          * @param method_code       Code with which method(s) should be mocked
          * @throws "INVALID-ARGUMENT" in case the method(s) is already mocked.
          *
          * Note: In case an exception is raised, no method is mocked.
          * Note: You can use asterisk (*) to mock all methods that will be called.
          */
        public nothing _mock(softlist<string> method_names, code method_code) {
            foreach string method_name in (method_names) {
                if (exists self.mocked_methods{method_name}) {
                    throw "INVALID-ARGUMENT", sprintf("Method %n is already mocked", method_name);
                }
            }

            foreach string method_name in (method_names) {
                self.mocked_methods{method_name} = method_code;
            }
        }

        #! Mocks @p method_names method(s) and returns the QMockProxy for further settings.
        /** @param method_names      One or more method names that should be mocked
          * @returns QMockProxy for further settings.
          * @throws "INVALID-ARGUMENT" in case the method(s) is already mocked with code
          *         (@see QMock::_mock(softlist<string>, code))
          *
          * Note: In case an exception is raised, no method is mocked.
          * Note: If the method is already mocked via code (@see QMock::_mock(softlist<string>, code))
          *       an exception is raised (it is not possible to combine these options).
          * Note: If the method is already mocked via QMockProxy, then new QMockProxy is added into the chain
          *       of evaluations and will be evaluated as logical "or" in the order of QMock::_mock method was called.
          * Note: You can use asterisk (*) to mock all methods that will be called.
          */
        public QMockProxy _mock(softlist<string> method_names) {
            foreach string method_name in (method_names) {
                if (exists self.mocked_methods{method_name}) {
                    if (!(self.mocked_methods{method_name} instanceof QMockProxy)) {
                        throw "INVALID-ARGUMENT", sprintf("Method %n is already mocked", method_name);
                    }
                }
            }

            auto obj = new QMockProxy();
            foreach string method_name in (method_names) {
                if (exists self.mocked_methods{method_name}) {
                    obj.addEvaluation(self.mocked_methods{method_name});
                }
                self.mocked_methods{method_name} = obj;
            }
            return obj;
        }

        #! Tests whether the method @method_name was called.
        /** @param method_name      name of the mocked method
          * @returns int    the amount of method calls
          */
        public int _assertCalled(string method_name) {
            return elements select self._mock_calls, $1 === method_name;
        }

        #! Tests whether the method @method_name was called exactly once.
        /** @param method_name      name of the mocked method
          * @returns bool    True, if the method was called once; False, otherwise.
          */
        public bool _assertCalledOnce(string method_name) {
            return 1 === self._assertCalled(method_name);
        }

        #! Tests whether the method @method_name was called with exactly these arguments @args.
        /** @param method_name      name of the mocked method
          * @param args             the expected arguments of the mocked method call
          * @returns int    the amount of method calls
          */
        public int _assertCalledWithArgs(string method_name, list args) {
            int amount_of_calls = 0;
            foreach list called_args in (self._mock_calls_with_args{method_name}) {
                amount_of_calls += (called_args === args);
            }
            return amount_of_calls;
        }

        #! Tests whether the method @method_name was called exactly once with exactly these arguments @args.
        /** @param method_name      name of the mocked method
          * @param args             the expected arguments of the mocked method call
          * @returns bool    True, if the method was called once; False, otherwise.
          */
        public bool _assertCalledOnceWithArgs(string method_name, list args) {
            return 1 === self._assertCalledWithArgs(method_name, args);
        }

        #! Evaluates the mocked method.
        /** This method is called when no method of @method_name name is defined within the class.
          * That means this method is called for the mocked methods.
          * @param method_name      name of the method called
          * @returns whatever the mocked method returns
          * @throws "INVALID-ARGUMENT" in case is_strict === STRICT and the method was not mocked
          *         or the evaluation failed.
          * @throws whatever the mocked method throws
          *
          * Note: The method is synchronized to prevent multi thread problems.
          */
        synchronized public auto methodGate(string method_name) {

            # look for mocked code
            auto mth = self.mocked_methods{method_name} ?? self.mocked_methods{"*"};

            if (mth === NOTHING && self.settings.is_strict === QMock::STRICT) {
                throw "INVALID-ARGUMENT", sprintf("Method %n is not mocked", method_name);
            }

            # track call
            push _mock_calls, method_name;

            # track call with arguments
            if (!exists _mock_calls_with_args{method_name}) {
                _mock_calls_with_args{method_name} = ();
            }
            push _mock_calls_with_args{method_name}, argv;

            # not mocked and !Qmock::STRICT
            if (mth === NOTHING) {
                return NOTHING;
            }

            # evaluate QMockProxy if it's mocked via it
            if (mth instanceof QMockProxy) {
                try {
                    return mth.eval(argv);
                } catch (ex) {
                    switch (ex.err) {
                        case "QMOCK-PROXY-EVAL-FAIL":
                            # evaluation of QMockProxy fail
                            if (self.settings.is_strict === QMock::STRICT) {
                                throw "INVALID-ARGUMENT",
                                      sprintf("Mocked method %n evaluation failed", method_name),
                                      argv;
                            }
                            return NOTHING;
                        default:
                            rethrow;
                    }
                }
            }

            # call the mock code if it's mocked via it
            return call_function_args(mth, argv);
        }
    }

} # namespace
