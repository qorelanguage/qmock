#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-
# author: Qore Technologies

%new-style
%require-types
%strict-args
%enable-all-warnings
%no-child-restrictions
%require-our

%requires QUnit

%append-module-path ../src
%requires QMockSQL

%exec-class DatasourceTest

# --- tested code (production) ---

sub productionCall(Qore::SQL::AbstractDatasource ds) {
    ds.selectRow(" -- sql-id: 1234
        SELECT * FROM dual
    ");
    ds.selectRow(" -- sql-id: 5678
        SELECT * FROM dual
    ");
}

# --- ---

class DatasourceTest inherits QUnit::Test {

    constructor() : QUnit::Test("DatasourceTest", "1.0") {

        addTestCase("testMockWithCode", \testMockWithCode());
        addTestCase("testMockWithProxies", \testMockWithProxies());

        set_return_value(main());
    }

    testMockWithCode() {
        # real production database
        auto prodDB = new DatasourceMock();
        prodDB._mock_settings(QMock::VAGUE);

        # mock database
        auto ds = new DatasourceMock();
        ds._mock_settings(QMock::STRICT);

        # mock method
        ds._mock("selectRow", auto sub(*list argv) {
            string sql = argv[0];
            # mock returned data for queries
            if (sql =~ /-- sql-id: 1234/) {
                return {"a": 2};
            }
            if (sql =~ /-- sql-id: [5-8]{4}/) {
                return {"b": 5};
            }

            # if query doesn't match any regexp, call real database
            return prodDB.selectRow(sql);
        });

        # mock all other methods
        ds._mock("*", auto sub(*list argv) {});

        # perform the testing
        {
            on_success ds.commit();
            on_error ds.rollback();

            productionCall(ds);
        }

        # assert results
        assertEq(2, ds._assert_called("selectRow"));
        assertEq(("selectRow", "selectRow", "commit"), ds._mock_calls);

        assertEq(0, elements prodDB._mock_calls);
    }

    testMockWithProxies() {
        # mock database
        auto ds = new DatasourceMock();
        ds._mock_settings(QMock::STRICT);

        # mock method
        ds._mock("selectRow").argRegex(0, "-- sql-id: 1234").return_value({"a": 2});
        ds._mock("selectRow").argRegex(0, "-- sql-id: [5-8]{4}").return_value({"b": 5});
        ds._mock(("commit", "rollback"));

        # perform the testing
        {
            on_success ds.commit();
            on_error ds.rollback();

            productionCall(ds);
        }

        # assert results
        assertEq(2, ds._assert_called("selectRow"));
        assertEq(("selectRow", "selectRow", "commit"), ds._mock_calls);
    }
}
