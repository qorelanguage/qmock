#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-
# author: Qore Technologies

%new-style
%require-types
%strict-args
%enable-all-warnings
%no-child-restrictions
%require-our

%requires QUnit

%append-module-path ../src
%requires QMock

%exec-class QMockTest

# TODO doc
final class QMockAccessor inherits QMock {
    private:internal constructor() {} # make it as pure abstract class

    public static auto get(QMock mock, string name) {
        return mock{name};
    }
}

# TODO doc
final class QMockProxyAccessor inherits QMockProxy {
    private:internal constructor() {} # make it as pure abstract class

    public static auto get(QMockProxy proxy, string name) {
        return proxy{name};
    }
}

class QMockTest inherits QUnit::Test {

    constructor() : QUnit::Test("QMockTest", "1.0") {
        # QMock tests
        addTestCase("QMock: constructor", \testQMockCtor());
        addTestCase("QMock: settings", \testQMockSettings());
        addTestCase("QMock: mock method with code", \testQMockMockMethodWithCode());
        addTestCase("QMock: mock multiple methods with QMockProxy", \testQMockMockMultipleMethodsWithQMockProxy());
        addTestCase("QMock: mock multiple methods with QMockProxy and code will throw",
                    \testQMockMockMultipleMethodsWithQMockProxyAndCode());
        addTestCase("QMock: mock multiple methods with code", \testQMockMockMultipleMethodsWithCode());
        addTestCase("QMock: call not mocked method when is_strict", \testQMockCallNotMockedMethodWhenStrict());
        addTestCase("QMock: call mocked method when is_strict but evaluation fails",
                    \testQMockCallMockMethodAndEvaluationFails());
        addTestCase("QMock: call not mocked method when not is_strict", \testQMockCallNotMockedMethodWhenVague());
        addTestCase("QMock: mocked with asterisk", \testQMockMockedWithAsterisk());
        addTestCase("QMock: mocked method throws", \testQMockMockedMethodThrows());

        # QMockProxy tests
        addTestCase("QMockProxy: constructor", \testQMockProxyCtor());
        addTestCase("QMockProxy: addEvaluation", \testQMockProxyAddEvaluation());
        addTestCase("QMockProxy: return value", \testQMockProxyReturnValue());
        addTestCase("QMockProxy: return value as a code", \testQMockProxyReturnValueCode());
        addTestCase("QMockProxy: exec code", \testQMockProxyExecCode());
        addTestCase("QMockProxy: throws", \testQMockProxyThrows());
        addTestCase("QMockProxy: mixing return_value, exec_code and throw exception",
                    \testQMockProxyMixingReturnValueExecCodeThrowException());
        addTestCase("QMockProxy: match second rule, skip the first", \testQMockProxyMatchSecond());
        addTestCase("QMockProxy: argsEq with list", \testQMockProxyArgsEqWithList());
        addTestCase("QMockProxy: argsEq with empty list", \testQMockProxyArgsEqWithEmptyList());
        addTestCase("QMockProxy: argsEq with NOTHING", \testQMockProxyArgsEqWithNothing());
        addTestCase("QMockProxy: throws when mock method expects args", \testQMockProxyThrowsMockedWithArgs());

        set_return_value(main());
    }

    testQMockProxyCtor() {
        auto proxy = new QMockProxy();

        # default settings
        assertEq((), QMockProxyAccessor::get(proxy, "rules"), "default rules");
        assertEq(NOTHING, QMockProxyAccessor::get(proxy, "return_value"), "default return_value");
        assertEq((), QMockProxyAccessor::get(proxy, "others"), "default other proxies");
    }

    testQMockProxyAddEvaluation() {
        auto proxy = new QMockProxy();
        assertEq(new list<QMockProxy>(), QMockProxyAccessor::get(proxy, "others"), "default other proxies");

        # add other proxy
        auto proxy2 = new QMockProxy();
        proxy.addEvaluation(proxy2);

        assertEq((proxy2, ), QMockProxyAccessor::get(proxy, "others"), "added another proxies");
    }

    testQMockProxyReturnValue() {
        auto proxy = new QMockProxy();

        # set return value
        int r = 4;
        proxy.returnValue(r);
        assertEq(r, QMockProxyAccessor::get(proxy, "return_value"), "return_value set");

        # assert eval returns the return value
        auto eval_ret = proxy.eval();
        assertEq(r, eval_ret, "eval returns return_value");
    }

    testQMockProxyReturnValueCode() {
        auto proxy = new QMockProxy();

        # set return value
        int called = 0;
        code ret_code = sub() { ++called; };
        proxy.returnValue(ret_code);
        assertEq(ret_code, QMockProxyAccessor::get(proxy, "return_value"), "return_value set");

        # assert eval returns the return value
        auto eval_ret = proxy.eval();
        assertEq(ret_code, eval_ret, "eval returns return_value");
        assertEq(0, called, "returned value code was not executed");
        eval_ret();
        assertEq(1, called, "returned value code was executed");
    }

    testQMockProxyExecCode() {
        auto proxy = new QMockProxy();

        # set return value
        int called = 0;
        int r = 4;
        code func_code = int sub() { called++; return r; };
        proxy.execCode(func_code);
        assertEq(func_code, QMockProxyAccessor::get(proxy, "exec_code"), "exec_code set");

        # assert eval returns the return value
        auto eval_ret = proxy.eval();
        assertEq(1, called, "return_value code called once");
        assertEq(r, eval_ret, "eval executes return_value code");
    }

    testQMockProxyThrows() {
        auto proxy = new QMockProxy();

        # set exception
        proxy.throwException("EXC", "DESC", (1, 2));
        assertTrue(QMockProxyAccessor::get(proxy, "exec_code") instanceof code, "exec_code set to code");

        # assert throws
        assertThrows("EXC", "^DESC$", sub() { proxy.eval(); }, NOTHING, "eval throws exception");
    }

    testQMockProxyMixingReturnValueExecCodeThrowException() {
        {
            auto proxy = new QMockProxy();
            proxy.returnValue(1);
            assertThrows("INVALID-ARGUMENT", "^Return value was already set to 1$",
                         sub() { proxy.execCode(sub(){}); });
            assertThrows("INVALID-ARGUMENT", "^Return value was already set to 1$",
                         sub() { proxy.throwException("EXC"); });
        }
        {
            auto proxy = new QMockProxy();
            proxy.execCode(sub(){});
            assertThrows("INVALID-ARGUMENT", "^Exec code was already set$",
                         sub() { proxy.returnValue(1); });
            assertThrows("INVALID-ARGUMENT", "^Exec code was already set$",
                         sub() { proxy.throwException("EXC"); });
        }
        {
            auto proxy = new QMockProxy();
            proxy.throwException("EXC");
            assertThrows("INVALID-ARGUMENT", "^Exec code was already set$",
                         sub() { proxy.returnValue(1); });
            assertThrows("INVALID-ARGUMENT", "^Exec code was already set$",
                         sub() { proxy.execCode(sub(){}); });
        }
    }

    testQMockProxyMatchSecond() {
        # TODO
    }

    testQMockProxyArgsEqWithList() {
        auto proxy = new QMockProxy();

        proxy.argsEq((1,2,3)).returnValue("works");

        # asserts
        assertEq("works", proxy.eval((1,2,3)));
        assertThrows("QMOCK-PROXY-EVAL-FAIL", NOTHING, sub() { proxy.eval(); });   # NOTHING
        assertThrows("QMOCK-PROXY-EVAL-FAIL", NOTHING, sub() { proxy.eval(()); }); # empty list
        assertThrows("QMOCK-PROXY-EVAL-FAIL", NOTHING, sub() { proxy.eval(("1", "2", "3")); });  # ===
        assertThrows("QMOCK-PROXY-EVAL-FAIL", NOTHING, sub() { proxy.eval((1, 2, 3, 4)); });
    }

    testQMockProxyArgsEqWithEmptyList() {
        auto proxy = new QMockProxy();

        proxy.argsEq(()).returnValue("works");

        # asserts
        assertEq("works", proxy.eval(()));
        assertThrows("QMOCK-PROXY-EVAL-FAIL", NOTHING, sub() { proxy.eval(); });  # NOTHING is not empty list
        assertThrows("QMOCK-PROXY-EVAL-FAIL", NOTHING, sub() { proxy.eval(("1", "2", "3")); });
        assertThrows("QMOCK-PROXY-EVAL-FAIL", NOTHING, sub() { proxy.eval((1, 2, 3, 4)); });
    }

    testQMockProxyArgsEqWithNothing() {
        auto proxy = new QMockProxy();

        proxy.argsEq().returnValue("works");

        # asserts
        assertEq("works", proxy.eval());
        assertEq("works", proxy.eval(NOTHING));
        assertThrows("QMOCK-PROXY-EVAL-FAIL", NOTHING, sub() { proxy.eval(()); });  # empty list is not NOTHING
        assertThrows("QMOCK-PROXY-EVAL-FAIL", NOTHING, sub() { proxy.eval((1, 2, 3)); });
        assertThrows("QMOCK-PROXY-EVAL-FAIL", NOTHING, sub() { proxy.eval(("1", "2", "3")); });
    }

    testQMockProxyThrowsMockedWithArgs() {
        auto proxy = new QMockProxy();

        # mock to throw
        proxy.throwException("EXC");

        # evaluate without arguments
        assertThrows("EXC", NOTHING, sub() { proxy.eval(); });
        # evaluate with arguments
        assertThrows("EXC", NOTHING, sub() { proxy.eval((1,2)); });
    }

    # ----------------

    testQMockCtor() {
        auto qmock = new QMock();

        # default settings
        assertEq((), qmock._mock_calls, "default _mock_calls");
        assertEq({}, qmock._mock_calls_with_args, "default _mock_calls_with_args");
        assertEq({}, QMockAccessor::get(qmock, "mocked_methods"), "default mocked_method");
        assertEq(new hash<QMockSettings>(), QMockAccessor::get(qmock, "settings"), "default settings");
    }

    testQMockSettings() {
        auto qmock = new QMock();
        assertEq(QMock::STRICT, QMockAccessor::get(qmock, "settings").is_strict, "default is_strict");

        # update settings
        qmock._mockSettings({"is_strict": QMock::VAGUE});

        # assert settings change
        assertEq(QMock::VAGUE, QMockAccessor::get(qmock, "settings").is_strict, "changed is_strict");
    }

    testQMockMockMethodWithCode() {
        auto qmock = new QMock();
        assertEq({}, QMockAccessor::get(qmock, "mocked_methods"), "default mocked_methods");

        # mock method
        code mocked_code = int sub(int i) { return ++i; };
        qmock._mock("inc", mocked_code);

        # assert is there
        assertEq({"inc": mocked_code}, QMockAccessor::get(qmock, "mocked_methods"), "mocked one method");

        # call the mocked method
        int i = 3;
        auto ret = qmock.inc(i);
        assertEq(i+1, ret);
    }

    testQMockMockMultipleMethodsWithQMockProxy() {
        auto qmock = new QMock();

        # mock the same method with different condition
        qmock._mock("foo").argEq(0, 1).returnValue(3);
        qmock._mock("foo").argEq(0, 2).returnValue(5);

        # assert the calls return proper value based on the argument
        assertEq(3, qmock.foo(1));
        assertEq(5, qmock.foo(2));
    }

    testQMockMockMultipleMethodsWithQMockProxyAndCode() {
        auto qmock = new QMock();

        # mock the method via QMockProxy
        qmock._mock("foo").argEq(0, 1).returnValue(3);

        # another mock with QMockProxy is allowed
        qmock._mock("foo").argEq(0, 2).returnValue(5);

        # mocking the same method via code throws
        assertThrows("INVALID-ARGUMENT", "^Method \"foo\" is already mocked$",
                     sub() { qmock._mock(("bar", "foo"), sub(){}); });

        # bar is not mocked
        assertEq(("foo",), QMockAccessor::get(qmock, "mocked_methods").keys());
    }

    testQMockMockMultipleMethodsWithCode() {
        auto qmock = new QMock();
        assertEq({}, QMockAccessor::get(qmock, "mocked_methods"));

        # mock methods
        code mocked_code = bool sub() { return False; };
        qmock._mock(("isFoo", "isBar"), mocked_code);

        # assert are there
        assertEq({
            "isFoo": mocked_code,
            "isBar": mocked_code,
        }, QMockAccessor::get(qmock, "mocked_methods"));

        # mock again the same one and some others
        assertThrows("INVALID-ARGUMENT", "^Method \"isBar\" is already mocked$",
                     sub() { qmock._mock(("isXYZ", "isBar", "isABC"), mocked_code); });

        # ensure that not even isXYZ nor isABC was mocked
        assertEq({
            "isFoo": mocked_code,
            "isBar": mocked_code,
        }, QMockAccessor::get(qmock, "mocked_methods"));
    }

    testQMockCallNotMockedMethodWhenStrict() {
        auto qmock = new QMock();
        assertEq(QMock::STRICT, QMockAccessor::get(qmock, "settings").is_strict, "is_strict");

        # calling not mocked method throws
        assertThrows("INVALID-ARGUMENT", "^Method \"inc\" is not mocked$",
                     sub() { qmock.inc(3); });
        # no mocked call logged
        assertEq((), qmock._mock_calls, "no mocked calls yet");
        assertEq({}, qmock._mock_calls_with_args, "no mocked calls with args");
    }

    testQMockCallMockMethodAndEvaluationFails() {
        auto qmock = new QMock();
        assertEq(QMock::STRICT, QMockAccessor::get(qmock, "settings").is_strict, "is_strict");

        # mock method
        qmock._mock("foo").argEq(0, "xml").returnValue(1);

        # calling mocked method throws because argument 0 is not xml
        # the exception contains arguments from evaluation (this cannot be asserted via assertThrows)
        try {
            qmock.foo("csv");
            fail("Code above shall raise an exception");
        } catch (ex) {
            if (ex.err != "INVALID-ARGUMENT") {
                rethrow;
            }
            assertEq(ex.err, "INVALID-ARGUMENT");
            assertEq(ex.desc, "Mocked method \"foo\" evaluation failed");
            assertEq(("csv",), ex.arg);
        }
        # no mocked call logged
        assertEq(("foo",), qmock._mock_calls, "mocked method calls even if evaluation failed");
        assertEq({"foo": (("csv",),)}, qmock._mock_calls_with_args, "no mocked calls with args");
    }

    testQMockCallNotMockedMethodWhenVague() {
        auto qmock = new QMock();
        qmock._mockSettings({"is_strict": QMock::VAGUE});
        assertEq(QMock::VAGUE, QMockAccessor::get(qmock, "settings").is_strict, "not is_strict");

        # calling not mocked when is_strict == VAGUE
        auto ret = qmock.inc(3);
        assertEq(NOTHING, ret, "not mocked call returns NOTHING");
        assertEq(("inc",), qmock._mock_calls, "mocked calls list");
        assertEq({"inc": ((3,),)}, qmock._mock_calls_with_args, "mocked calls with args");

        auto ret2 = qmock.inc(4);
        assertEq(NOTHING, ret2, "not mocked call returns NOTHING");
        assertEq(("inc", "inc",), qmock._mock_calls, "mocked calls list");
        assertEq({"inc": ((3,), (4,),)}, qmock._mock_calls_with_args, "mocked calls with args");
    }

    testQMockMockedWithAsterisk() {
        auto qmock = new QMock();
        assertEq(QMock::STRICT, QMockAccessor::get(qmock, "settings").is_strict, "is_strict");

        int called = 0;
        # mock "all" with one code
        qmock._mock("*", sub() {
            argv = (); # because %strict-args is used, we have to touch argv
            called++;
        });

        qmock.foo(1);
        qmock.bar(2);

        # call log contains real function names
        assertEq(2, called, "mocked * method was called twice");
        assertEq(("foo", "bar",), qmock._mock_calls, "mocked calls list");
        assertEq({
            "foo": ((1,),),
            "bar": ((2,),),
        }, qmock._mock_calls_with_args, "mocked calls with args");
    }

    testQMockMockedMethodThrows() {
        auto qmock = new QMock();

        int called = 0;
        # mock method that throws
        qmock._mock("throw", sub(string err, *string desc) { called++; throw err, desc; });

        string exc = "EXC";
        string desc = "desc";
        assertThrows(exc, "^"+desc+"$", sub() { qmock.throw(exc, desc); });

        # call log contains the method even if it throws
        assertEq(1, called, "mocked method was called");
        assertEq(("throw",), qmock._mock_calls, "mocked calls list");
        assertEq({"throw": ((exc, desc,),)}, qmock._mock_calls_with_args, "mocked calls with args");
    }
}
